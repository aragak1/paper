{"url": "http://exercise.acmcoder.com/comp_test?paperId=94", "content": [{"answer": "<p>思路： </p><p>F0=an;</p><p>F1=anx+an-1</p><p>Fn=xF(n-1)+an-1</p><p>代码：</p><p>function sum(int a[], int n, int x){</p><p>    s=a[n]</p><p>    for(int i=1; i<=n; i++){</p><p>        s += x*s + a[n-i]</p><p>    }</p><p>    return s;</p><p>}</p>", "type": "问答", "name": "<p>计算机中处理乘法的指令要比加法复杂的多， 因为在一些关键系统中我们常常会考虑如何尽可能减少乘法的运算。</p><p>现在有如下的表达式</p><p>y= anxn+an-1xn-1 +…..+a1x +a0</p><p>其中an, an-1, ….a1, a0是常数， 给一个x， 要求尽快算出y的值。请尝试写出这样的一个函数。</p>"}, {"answer": "B", "type": "单选", "name": "<p>某二叉树结点的中序序列为A、B、C、D、E、F、G、H，后序序列为B、D、C、A、F、G、H、E。该二叉树的层次次序序列为?</p>", "options": [{"option_name": "A", "content": "E、G、H、F、A、C、D、B"}, {"option_name": "B", "content": "E、A、H、C、G、B、D、F"}, {"option_name": "C", "content": "E、A、G、H、C、F、B、D"}, {"option_name": "D", "content": "E、G、A、C、H、D、F、B"}]}, {"answer": "D", "type": "单选", "name": "<p>当参数*x==1, *y==1, *z==1时，下列不可能是函数add的返回值的( )?<br></p><pre class=\"brush:java;toolbar:false\">int&nbsp;add(int&nbsp;*x,&nbsp;int&nbsp;*y,&nbsp;int&nbsp;*z){\r\n&nbsp;&nbsp;&nbsp;&nbsp;*x&nbsp;+=&nbsp;*x;\r\n&nbsp;&nbsp;&nbsp;&nbsp;*y&nbsp;+=&nbsp;*x;\r\n&nbsp;&nbsp;&nbsp;&nbsp;*z&nbsp;+=&nbsp;*y;\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;*z;\r\n&nbsp;}</pre><p><br></p>", "options": [{"option_name": "A", "content": "4"}, {"option_name": "B", "content": "5"}, {"option_name": "C", "content": "6"}, {"option_name": "D", "content": "7"}]}, {"answer": "<p>int find(node * root, int val) {</p><p>    int ret = 1;</p><p> </p><p>    if (root->get_data() == val) {</p><p>        return ret;</p><p>    } else {</p><p>        int  ret1 = 1 + find(root->get_left(), val);</p><p>        int  ret2 = 1 + find(root->get_right(), val);</p><p>        if (ret1 > ret2)</p><p>            ret = ret2;</p><p>        else</p><p>            ret = ret1;</p><p> </p><p>        return ret;</p><p>    }</p><p>}</p>", "type": "问答", "name": "<p>给出二叉树接口为<br></p><pre class=\"brush:java;toolbar:false\">class&nbsp;node\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;*get_left();\r\n&nbsp;&nbsp;&nbsp;&nbsp;node&nbsp;*get_right();\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;get_data();\r\n}</pre><p>找出值为val的最浅节点所在层数<br></p><pre class=\"brush:java;toolbar:false\">int&nbsp;find(node&nbsp;*root,&nbsp;int&nbsp;val).</pre><p><br></p>"}, {"type": "填空", "name": "<p>在区间[-1, 1]随意取两个数，它们的和大于1的概率是<span style=\"text-decoration: underline;\">&nbsp; &nbsp;&nbsp;</span>。(分数表示)</p>"}, {"answer": "B", "type": "单选", "name": "<p>以下排序中时间复杂度最差的是</p>", "options": [{"option_name": "A", "content": "归并排序"}, {"option_name": "B", "content": "选择排序"}, {"option_name": "C", "content": "希尔排序"}, {"option_name": "D", "content": "堆排序"}]}, {"answer": "B", "type": "单选", "name": "<p>下列哪些因素不会限制Linux服务器并发连接数?</p>", "options": [{"option_name": "A", "content": "系统内存大小"}, {"option_name": "B", "content": "系统网卡数量"}, {"option_name": "C", "content": "系统最大文件句柄数量"}, {"option_name": "D", "content": "系统IP地址数量"}]}, {"answer": "<p>a)可使用优先级队列进行辅助，weight越大的优先级越高。由于所有请求都是同一种请求，所以可以将其统一封装管理。</p><p>在Java中可以使用 PriorityQueue<T> 进行处理，队列中存放待执行的请求。该优先级队列的元素需要继承Comparable接口用来实现比较，实现的时候用weight进行比较。</p><p>b)为减小尖峰的冲击，可以使用线程池，即运用线程池，将可执行的线程的最大值规定下来，当尖峰来临时，线程池可根据待执行的队列中的任务数量调用线程，当线程池中的所有线程都处于busy状态的时候，剩下的任务在队列中等待。直到有空余线程的时候，再从队列中取出任务进行操作。</p><p>该方法也可用于C）问题中，避免handler压力过大，对请求处理的线程数量进行限制，使得handler的处理能力高于最大任务量即可。</p>", "type": "问答", "name": "<p>下图所示，server接收调用方发送的请求（request）并转发给handler处理。每个调用方有名称（name）和优先级（weight），所有调用方发送同一种请求，而且有可能短时间内发送大量请求（请求尖峰）。Handler每秒最多能够处理N个请求。现在需要为server设计一个请求控制模块，要求：</p><p>a)调用方weight值越高的请求，平均等待时间越低</p><p>b)减小请求尖峰的冲击</p><p>c)不能导致handler压力过大</p><p><img src=\"http://bj.bcebos.com/v1/acmcoder/1944140907521254.png?authorization=bce-auth-v1%2F02fe1db0eea94e8480054b43acd6124f%2F2016-06-09T13%3A21%3A40Z%2F-1%2F%2F99f55c323925d3b389658f755ceb12f05c4453368bdc8b8f51e2cb453c9d7577\" title=\"\" alt=\"\"></p>"}, {"answer": "C", "type": "单选", "name": "<p>设有一个栈，元素依次进栈的顺序是A,B,C,D,E。下列不可能的出栈顺序有?</p>", "options": [{"option_name": "A", "content": "ABCDE"}, {"option_name": "B", "content": "BCDEA"}, {"option_name": "C", "content": "EABCD"}, {"option_name": "D", "content": "EDCBA"}]}, {"answer": "A", "type": "单选", "name": "<p>下面关于inode描述错误的是?</p>", "options": [{"option_name": "A", "content": "inode和文件是一一对应的"}, {"option_name": "B", "content": "inode能描述文件占用的块数"}, {"option_name": "C", "content": "inode描述了文件大小和指向数据块的指针"}, {"option_name": "D", "content": "通过inode实现文件的逻辑结构和物理结构的转换"}]}, {"answer": "B", "type": "单选", "name": "<p>体育课的铃声响了，同学们都陆续地奔向操场，按老师的要求从高到矮站成一排。每个同学按顺序来到操场时，都从排尾走向排头，找到第一个比自己高的同学，并站到他的后面，这种站队的方法类似下列哪种算法</p>", "options": [{"option_name": "A", "content": "快速排序"}, {"option_name": "B", "content": "插入排序"}, {"option_name": "C", "content": "冒泡排序"}, {"option_name": "D", "content": "归并排序"}]}, {"type": "填空", "name": "<p>n从1开始，每个操作可以对n加1或加倍，如果要使n是2014，最少需要<span style=\"text-decoration: underline;\">&nbsp; </span>个操作。</p>"}, {"answer": "C", "type": "单选", "name": "<p>假设平均每个人人用户有300个好友，则一个人人用户的3跳好友数的数量级是?</p>", "options": [{"option_name": "A", "content": "十万级"}, {"option_name": "B", "content": "百万级"}, {"option_name": "C", "content": "千万级"}, {"option_name": "D", "content": "亿级"}]}], "company": "人人网", "name": "人人网2015校园招聘 研发工程师A", "id": "94"}