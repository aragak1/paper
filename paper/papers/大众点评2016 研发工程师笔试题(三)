{"url": "http://exercise.acmcoder.com/comp_test?paperId=143", "content": [{"answer": "D", "type": "单选", "name": "<p>n个字符组成了一个字符串:若每个字符都不一样，则该字符串共有多少个不同的非空子集</p>", "options": [{"option_name": "A", "content": "n"}, {"option_name": "B", "content": "n (n+1)/2"}, {"option_name": "C", "content": "n!"}, {"option_name": "D", "content": "2^n-1"}]}, {"answer": "C", "type": "单选", "name": "<p>关于内联函数说法错误的是:</p>", "options": [{"option_name": "A", "content": "不是任何一个函数都可定义成内联函数"}, {"option_name": "B", "content": "内联函数的函数体内不能含有复杂的结构控制语句"}, {"option_name": "C", "content": "递归函数可以被用来作为内联函数"}, {"option_name": "D", "content": "内联图数一般适合于只有1~5行语句的小函数"}]}, {"answer": "C", "type": "单选", "name": "<p>下面对析构函数的正确描述是：</p>", "options": [{"option_name": "A", "content": "系统不能提供默认的析构函数"}, {"option_name": "B", "content": "析构函数必须由用户定义"}, {"option_name": "C", "content": "析构函数没有参数"}, {"option_name": "D", "content": "析构函数可以设置默认参数"}]}, {"answer": "A", "type": "单选", "name": "<p>下面程序输出结果为？<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream.h&gt;\r\n#define&nbsp;SUB(X,Y)&nbsp;(X)*Y\r\nint&nbsp;main(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;a=3,b=4;\r\n&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;SUB（a++,++b);\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "15"}, {"option_name": "B", "content": "16"}, {"option_name": "C", "content": "20"}, {"option_name": "D", "content": "12"}]}, {"answer": "B", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream&gt;\r\n#include&lt;string&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nclass&nbsp;A\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;friend&nbsp;long&nbsp;fun(A&nbsp;s)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s.x&lt;3)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;s.x+fun(A(s.x&nbsp;-&nbsp;1));\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\npublic:\r\n&nbsp;&nbsp;&nbsp;&nbsp;A(long&nbsp;a)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;a--;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\nprivate:\r\n&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;x;\r\n};\r\nint&nbsp;main()\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;sum=0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;int&nbsp;i=0;&nbsp;i&lt;5;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;fun(A(i));\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;sum;\r\n}</pre><p>代码运行结果是？</p>", "options": [{"option_name": "A", "content": "21"}, {"option_name": "B", "content": "15"}, {"option_name": "C", "content": "9"}, {"option_name": "D", "content": "36"}]}, {"answer": "A", "type": "单选", "name": "<p>如下图所示，1~9诸数各有一个规定的符号，请据此回答下列问题。 &nbsp;<br><img src=\"http://bj.bcebos.com/v1/acmcoder/3382268150437418.jpg?authorization=bce-auth-v1%2F02fe1db0eea94e8480054b43acd6124f%2F2016-08-02T09%3A08%3A40Z%2F-1%2F%2F24b9f700d118c55183988d0205af5d491278e041ef242e58f72e85794cdf619e\" title=\"\" alt=\"\" width=\"650\" height=\"200\" style=\"width: 650px; height: 200px;\"><br>9与什么符号相对应？</p>", "options": [{"option_name": "A", "content": "÷"}, {"option_name": "B", "content": "+"}, {"option_name": "C", "content": "—"}, {"option_name": "D", "content": "\\"}]}, {"answer": "A", "type": "单选", "name": "<p>给出8个正整数 3 2 2 3 8 8 1 2。可以将这8个整数分成一组或多组。使得满足以下条件1，不能打乱给出的整数的顺序2，每一组的和不能超过18显然.这样的划分有很多种.求这样的划分中.每一组的最大值的和形成的最小值是:</p>", "options": [{"option_name": "A", "content": "13"}, {"option_name": "B", "content": "14"}, {"option_name": "C", "content": "15"}, {"option_name": "D", "content": "16"}]}, {"answer": "B", "type": "单选", "name": "<p>下面不属于Object类中方法的是:</p>", "options": [{"option_name": "A", "content": "hashCode(    )"}, {"option_name": "B", "content": "finally(    )"}, {"option_name": "C", "content": "wait(    )"}, {"option_name": "D", "content": "toString(    )"}]}, {"answer": "D", "type": "单选", "name": "<p>下列哪个说法是正确的:</p>", "options": [{"option_name": "A", "content": "ConcurrentHashMap使用synchronized关键字保证线程安全"}, {"option_name": "B", "content": "HashMap实现了Collection接口"}, {"option_name": "C", "content": "Arrays.asList方法返回java.uti.ArrayList对象"}, {"option_name": "D", "content": "SimpleDateFormat对象是线程不安全的"}]}, {"answer": "B", "type": "单选", "name": "<p>用二进制来编码字符串\"adceadaa\"，需要能够相据编码，解码回原来的字符串，则至少需要二进制字符的长度是?</p>", "options": [{"option_name": "A", "content": "12"}, {"option_name": "B", "content": "14"}, {"option_name": "C", "content": "18"}, {"option_name": "D", "content": "20"}]}, {"answer": "D", "type": "单选", "name": "<p>下列哪项不属于jdk1.6垃圾收集器？</p>", "options": [{"option_name": "A", "content": "Serail收集器"}, {"option_name": "B", "content": "parNew收集器"}, {"option_name": "C", "content": "CMS收集器"}, {"option_name": "D", "content": "G1收集器"}]}, {"answer": "B", "type": "单选", "name": "<p>一个二叉树,前序遍历结果是:a b d g c e f h;中序遍历结果是:d g b a e c f h 求后序遍历结果是:</p>", "options": [{"option_name": "A", "content": "g d b c e h f a"}, {"option_name": "B", "content": "g d b e h f c a"}, {"option_name": "C", "content": "d g b a c e f h"}, {"option_name": "D", "content": "g h d e f b c a"}]}, {"answer": "B", "type": "单选", "name": "<p>下面程序的运行结果：( &nbsp; &nbsp;)<br></p><pre class=\"brush:java;toolbar:false\">public&nbsp;static&nbsp;void&nbsp;main(String&nbsp;args[])&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread&nbsp;t=new&nbsp;Thread(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;&nbsp;run(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dianping();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;};\r\n&nbsp;&nbsp;&nbsp;&nbsp;t.run();\r\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(\"dazhong\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;void&nbsp;dianping(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(\"dianping\");\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "dazhongdianping"}, {"option_name": "B", "content": "dianpingdazhong"}, {"option_name": "C", "content": "a和b都有可能"}, {"option_name": "D", "content": "dianping循环输出，dazhong夹杂在中间"}]}, {"answer": "C", "type": "单选", "name": "<pre class=\"brush:java;toolbar:false\">public&nbsp;interface&nbsp;IService&nbsp;{String&nbsp;NAME=\"default\";}</pre><p>默认类型等价表示是哪一项:</p>", "options": [{"option_name": "A", "content": "public String NAME=\"default\";"}, {"option_name": "B", "content": "public static String NAME=\"default\";"}, {"option_name": "C", "content": "public static final String NAME=\"default\";"}, {"option_name": "D", "content": "private String NAME=\"default\";"}]}, {"answer": "A", "type": "单选", "name": "<p>有N个员工排队排成一排，每个员工对应了一个级别K，按照以下规则给员工发奖品。 1.每个员工都至少发一个奖品 2.相邻的两个员工如果级别不同，那么级别高的一定要得到比级别低的员工更多的奖品。 K为整数，1表示级别最低，然后是2,3，以此类推。 员工的级别排列如下：1 2 3 4 4 1 2，求最少需要的奖品总数，以满足上述规则？</p>", "options": [{"option_name": "A", "content": "15"}, {"option_name": "B", "content": "14"}, {"option_name": "C", "content": "13"}, {"option_name": "D", "content": "12"}]}, {"answer": "C", "type": "单选", "name": "<p>HashSet子类依靠( &nbsp; &nbsp; )方法区分重复元素。</p>", "options": [{"option_name": "A", "content": "toString(    ),equals(    )"}, {"option_name": "B", "content": "clone(    ),equals(    )"}, {"option_name": "C", "content": "hashCode(    ),equals(    )"}, {"option_name": "D", "content": "getClass(    ),clone(    )"}]}, {"answer": "B", "type": "单选", "name": "<p>有49个球，每个球都有从1到49不同的编号。若挑选若干个球，按照一定的顺序排成一个圆圈，使圈内任何相邻两个球的编号乘积小于100，那么最多能挑选出多少球？</p>", "options": [{"option_name": "A", "content": "16"}, {"option_name": "B", "content": "18"}, {"option_name": "C", "content": "19"}, {"option_name": "D", "content": "<p>20</p>"}]}, {"answer": "D", "type": "单选", "name": "<p>有以下程序运行结果为:<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nchar&nbsp;fun(char&nbsp;x,&nbsp;char&nbsp;y)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x&nbsp;&lt;&nbsp;y)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;y;\r\n}\r\nint&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;a&nbsp;=&nbsp;'1',&nbsp;b&nbsp;=&nbsp;'1',&nbsp;c&nbsp;=&nbsp;'2';\r\n&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;fun(fun(a,&nbsp;b),&nbsp;fun(b,&nbsp;c));\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "运行出错"}, {"option_name": "B", "content": "2"}, {"option_name": "C", "content": "3"}, {"option_name": "D", "content": "1"}]}, {"answer": "A", "type": "单选", "name": "<p>下面关于类定义的说法中，正确的是:</p>", "options": [{"option_name": "A", "content": "类定义中包括数据成员和函数成员的声明"}, {"option_name": "B", "content": "类成员的缺省访问权限是保护的"}, {"option_name": "C", "content": "数据成员必须被声明为私有的"}, {"option_name": "D", "content": "成员函数只能在类体外进行定义"}]}, {"answer": "B", "type": "单选", "name": "<p>在int p[][4]={{1},{3,2},{4,5,6},{0}};中，p[1][2]的值是( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "1"}, {"option_name": "B", "content": "0"}, {"option_name": "C", "content": "6"}, {"option_name": "D", "content": "2"}]}, {"answer": "C", "type": "单选", "name": "<p>在公有派生的情况下，派生类中定义的成员函数只能访问原基类的( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "公有成员和私有成员"}, {"option_name": "B", "content": "私有成员和保护成员"}, {"option_name": "C", "content": "公有成员和保护成员"}, {"option_name": "D", "content": "私有成员,保护成员和公有成员"}]}, {"answer": "D", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">#include&nbsp;&lt;iostream&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nint&nbsp;f(int&nbsp;n){\r\n&nbsp;&nbsp;if&nbsp;(n==1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;else\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f(n-1)+n*n*n);\r\n}\r\nint&nbsp;main(){\r\n&nbsp;&nbsp;int&nbsp;s=f(3);\r\n&nbsp;&nbsp;cout&lt;&lt;s&lt;&lt;endl;\r\n&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p>运行结果是？</p>", "options": [{"option_name": "A", "content": "8"}, {"option_name": "B", "content": "9"}, {"option_name": "C", "content": "27"}, {"option_name": "D", "content": "36"}]}, {"answer": "B", "type": "单选", "name": "<p>有序数组1 2 3 4 5 6 7 8 9查找3的二分查找序列是:</p>", "options": [{"option_name": "A", "content": "1->2->3"}, {"option_name": "B", "content": "5->2->3"}, {"option_name": "C", "content": "9->5->3"}, {"option_name": "D", "content": "5->1->4->3"}]}, {"answer": "D", "type": "单选", "name": "<p>0-999999之间的所有数字中，任何一位都不包括数字3的数字总数为多少?</p>", "options": [{"option_name": "A", "content": "262144"}, {"option_name": "B", "content": "381041"}, {"option_name": "C", "content": "524288"}, {"option_name": "D", "content": "531441"}]}, {"answer": "B", "type": "单选", "name": "<p>以下哪项不属于java类加载过程？</p>", "options": [{"option_name": "A", "content": "生成java.lang.Class对象"}, {"option_name": "B", "content": "int类型对象成员变量赋予默认值"}, {"option_name": "C", "content": "执行static块代码"}, {"option_name": "D", "content": "类方法解析"}]}, {"answer": "A", "type": "单选", "name": "<p>Cross(sore) rents makes () inlet</p>", "options": [{"option_name": "A", "content": "skin"}, {"option_name": "B", "content": "skan"}, {"option_name": "C", "content": "lake"}, {"option_name": "D", "content": "make"}]}, {"answer": "A", "type": "单选", "name": "<p>关于以下程序代码的说明正确的是( &nbsp; &nbsp;)<br></p><pre class=\"brush:java;toolbar:false\">public&nbsp;class&nbsp;HasStatic&nbsp;{//&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;int&nbsp;x&nbsp;=&nbsp;100;//&nbsp;2\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String&nbsp;args[])&nbsp;{//&nbsp;3\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HasStatic&nbsp;hsl&nbsp;=&nbsp;new&nbsp;HasStatic();//&nbsp;4\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hsl.x++;//&nbsp;5\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HasStatic&nbsp;hs2&nbsp;=&nbsp;new&nbsp;HasStatic();//&nbsp;6\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hs2.x++;//&nbsp;7\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hsl&nbsp;=&nbsp;new&nbsp;HasStatic();//&nbsp;8\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hsl.x++;//&nbsp;9\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HasStatic.x--;//&nbsp;10\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"&nbsp;x=\"&nbsp;+&nbsp;x);//&nbsp;11\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "程序通过编译，输出结果为:x=102"}, {"option_name": "B", "content": "程序通过编译，输出结果为:x=103"}, {"option_name": "C", "content": "10行不能通过编译.因为x星私有静态变量"}, {"option_name": "D", "content": "5行不能通过编译.因为引用了私有静态变量"}]}, {"answer": "D", "type": "单选", "name": "<p>下列算法中，没有使用贪心策略的是:</p>", "options": [{"option_name": "A", "content": "Prim算法"}, {"option_name": "B", "content": "Kruskal算法"}, {"option_name": "C", "content": "Dijkstra算法"}, {"option_name": "D", "content": "KMP算法"}]}, {"answer": "D", "type": "单选", "name": "<p>多个线程可同时操作一个数据，为了保证该数据的准确性，可将操作该数据的部分改为:</p>", "options": [{"option_name": "A", "content": "只写"}, {"option_name": "B", "content": "只读"}, {"option_name": "C", "content": "异步"}, {"option_name": "D", "content": "同步"}]}, {"answer": "C", "type": "单选", "name": "<p>有以下程序<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream&gt;\r\n#include&lt;stdio.h&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nint&nbsp;main(){\r\n&nbsp;&nbsp;int&nbsp;m=0123,&nbsp;n&nbsp;=&nbsp;123;\r\n&nbsp;&nbsp;printf(\"%o&nbsp;%o\\n\",&nbsp;m,&nbsp;n);\r\n&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p>程序运行后的输出结果是( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "0123 0173"}, {"option_name": "B", "content": "0123 173"}, {"option_name": "C", "content": "123 173"}, {"option_name": "D", "content": "173 173"}]}], "company": "大众点评", "name": "大众点评2016 研发工程师笔试题(三)", "id": "143"}