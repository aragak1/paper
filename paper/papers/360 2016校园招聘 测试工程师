{"url": "http://exercise.acmcoder.com/comp_test?paperId=155", "content": [{"answer": "BCFG", "type": "不定项选择", "name": "<p>下面哪些测试属于黑盒测试方法（）</p>", "options": [{"option_name": "A", "content": "路径测试"}, {"option_name": "B", "content": "等价类划分"}, {"option_name": "C", "content": "边界值分析"}, {"option_name": "D", "content": "条件判断"}, {"option_name": "E", "content": "循环测试"}, {"option_name": "F", "content": "因果图分析"}, {"option_name": "G", "content": "正交分析法"}]}, {"answer": "BC", "type": "不定项选择", "name": "在 C 语言中下面那个语句的结果是1？", "options": [{"option_name": "A", "content": "main 函数正常结束的返回值"}, {"option_name": "B", "content": "return 7&1;"}, {"option_name": "C", "content": "char *p=\"hello\"; return p == \"hello\";"}, {"option_name": "D", "content": "其他几项都不对"}]}, {"answer": "C", "type": "单选", "name": "<p>按照OSI模型的层次概念，下列几个协议中哪一个协议在协议栈的最底层?</p>", "options": [{"option_name": "A", "content": "HTTP"}, {"option_name": "B", "content": "FTP"}, {"option_name": "C", "content": "IP"}, {"option_name": "D", "content": "TCP"}]}, {"answer": "CE", "type": "多选", "name": "<p>如果待排序序列中两个数据元素具有相同的值,在排序前后它们的相互位置发生颠倒,则称该排序算法是不稳定的( &nbsp; )就是不稳定的排序方法</p>", "options": [{"option_name": "A", "content": "起泡排序"}, {"option_name": "B", "content": "归并排序"}, {"option_name": "C", "content": "希尔排序"}, {"option_name": "D", "content": "直接插入排序"}, {"option_name": "E", "content": "简单选择排序"}]}, {"answer": "E", "type": "单选", "name": "&nbsp; &nbsp;\t<p>How many times is f() called when calculating f(10)?</p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;f(int&nbsp;x)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;if(x&nbsp;&lt;=&nbsp;2)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;f(x&nbsp;-&nbsp;2)&nbsp;+&nbsp;f(x&nbsp;-&nbsp;4)&nbsp;+&nbsp;1;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "14"}, {"option_name": "B", "content": "18"}, {"option_name": "C", "content": "20"}, {"option_name": "D", "content": "24"}, {"option_name": "E", "content": "None of the above"}]}, {"answer": "B", "type": "单选", "name": "<p>从根开始按层次(第0层-&gt;第1层-&gt;第2层)遍历一颗二叉树,需要使用什么辅助数据结构?( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "heap"}, {"option_name": "B", "content": "queue"}, {"option_name": "C", "content": "binary tree"}, {"option_name": "D", "content": "stack"}]}, {"answer": "C", "type": "单选", "name": "<p>快速排序在下面哪种情况下优势最明显( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "数据有多个相同数值"}, {"option_name": "B", "content": "数据基本有序"}, {"option_name": "C", "content": "数据基本无序"}, {"option_name": "D", "content": "数据无任何相同数值"}]}, {"answer": "D", "type": "单选", "name": "<p>下列排序方法中，属于稳定排序的是（ ）</p>", "options": [{"option_name": "A", "content": "选择排序"}, {"option_name": "B", "content": "希尔排序"}, {"option_name": "C", "content": "堆排序"}, {"option_name": "D", "content": "归并排序"}]}, {"answer": "C", "type": "单选", "name": "<p>下面不是面向对象的基本原则的是？</p>", "options": [{"option_name": "A", "content": "单一职责原则（Single-Resposibility Principle）"}, {"option_name": "B", "content": "开放封闭原则（Open-Closed principle）"}, {"option_name": "C", "content": "抽象类原则（Abstract-Class principle）"}, {"option_name": "D", "content": "依赖倒置原则（Dependecy-Inversion Principle）"}]}, {"answer": "ABD", "type": "多选", "name": "<p>bash文件运算符有（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）</p>", "options": [{"option_name": "A", "content": "d"}, {"option_name": "B", "content": "f"}, {"option_name": "C", "content": "o"}, {"option_name": "D", "content": "s"}]}, {"answer": "A", "type": "单选", "name": "<p>下面哪些调用转换支持可变长度参数</p>", "options": [{"option_name": "A", "content": "cdecl"}, {"option_name": "B", "content": "stdcall"}, {"option_name": "C", "content": "pascal"}, {"option_name": "D", "content": "fastcal"}]}, {"answer": "D", "type": "单选", "name": "<p>下面代码段的运行结果（环境linux平台, g++编译器）:</p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x&nbsp;=&nbsp;10;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;y&nbsp;=&nbsp;10;\r\n&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;y&nbsp;=&nbsp;++y;\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%d&nbsp;%d\",&nbsp;x,&nbsp;y);\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "10 10"}, {"option_name": "B", "content": "10 11"}, {"option_name": "C", "content": "11 10"}, {"option_name": "D", "content": "11 11"}]}, {"answer": "AD", "type": "多选", "name": "<p>状态检测技术也称动态包过滤技术，是包过滤技术的延伸，那么以下论述不是动态包过滤优点的是（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）</p>", "options": [{"option_name": "A", "content": "提高了安全性和效率"}, {"option_name": "B", "content": "可以进行内容控制"}, {"option_name": "C", "content": "包过滤防火墙中规则表可以动态随机变化"}, {"option_name": "D", "content": "对用户透明"}]}, {"answer": "ABCD", "type": "不定项选择", "name": "<p>软件测试计划评审会需要哪些人员参加？</p>", "options": [{"option_name": "A", "content": "项目经理"}, {"option_name": "B", "content": "SQA 负责人"}, {"option_name": "C", "content": "配置负责人"}, {"option_name": "D", "content": "测试组"}]}, {"answer": "C", "type": "单选", "name": "<p>Which of following C++ code is correct?</p>", "options": [{"option_name": "A", "content": "int f() { int *a = new int(3); return *a; }"}, {"option_name": "B", "content": "int *f() { int a[3] = {1, 2, 3}; return a; }"}, {"option_name": "C", "content": "vector<int> f() {vector<int> v(3); return v; }"}, {"option_name": "D", "content": "void f(int *ret) { int a[3] = {1, 2, 3}; ret = a; return; }"}]}, {"answer": "B", "type": "单选", "name": "<p>执行程序<br></p><p>for file<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tr a-z A-Z &lt; $file &gt; $file<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; done<br>的结果是（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）<br></p><p><br></p>", "options": [{"option_name": "A", "content": "查找文件中的字母"}, {"option_name": "B", "content": "把文件中的小写转换为大写"}, {"option_name": "C", "content": "统计文件中的字母"}, {"option_name": "D", "content": "删除文件中的字母"}]}, {"answer": "C", "type": "单选", "name": "<p>数据表建建立复合索引tab_index(“name”,”age”)，下面哪些语句能用上索引？（ &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "select*from table where age=18 and name=’test’;"}, {"option_name": "B", "content": "select*from table where name=’test’ and age=18;"}, {"option_name": "C", "content": "select*from table where name like”%test%” and age=18;"}, {"option_name": "D", "content": "select*from table where name like”%test” and age=18;"}]}, {"answer": "A", "type": "单选", "name": "<p>NSTimer *myTimer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(doSomeThing:) userInfo:nil repeats:YES];&nbsp;</p><p>[myTimer fire]</p><p><br></p>", "options": [{"option_name": "A", "content": "没有将timer加入runloop"}, {"option_name": "B", "content": "doSomeThing缺少参数"}, {"option_name": "C", "content": "忘记传递数据给userInfo"}, {"option_name": "D", "content": "myTimer对象未通过[[myTimer alloc] init]方法初始化"}]}, {"answer": "D", "type": "单选", "name": "<p>下列PHP配置项中，哪一个和安全最不相关:( &nbsp; )&nbsp;</p>", "options": [{"option_name": "A", "content": "open_basedir<br>"}, {"option_name": "B", "content": "register_globals<br>"}, {"option_name": "C", "content": "disable_functions<br>"}, {"option_name": "D", "content": "file_uploads<br>"}]}, {"answer": "C", "type": "单选", "name": "<p>将整数数组（7-6-3-5-4-1-2）按照堆排序的方式原地进行升序排列，请问在整个排序过程中，元素3的数组下标发生过____次改变。</p>", "options": [{"option_name": "A", "content": "1"}, {"option_name": "B", "content": "2"}, {"option_name": "C", "content": "3"}, {"option_name": "D", "content": "4"}, {"option_name": "E", "content": "5"}, {"option_name": "F", "content": "6"}]}, {"answer": "BC", "type": "不定项选择", "name": "<p>测试设计员的职责有哪些？</p>", "options": [{"option_name": "A", "content": "制定测试计划"}, {"option_name": "B", "content": "设计测试用例"}, {"option_name": "C", "content": "设计测试过程、脚本"}, {"option_name": "D", "content": "评估测试活动"}]}, {"answer": "A", "type": "单选", "name": "<p>接口是一种引用类型，在接口中可以声明（ ），但不可以声明公有的域或私有的成员变量。</p>", "options": [{"option_name": "A", "content": "方法、属性、索引器和事件"}, {"option_name": "B", "content": "方法、属性信息、属性"}, {"option_name": "C", "content": "索引器和字段"}, {"option_name": "D", "content": "事件和字段"}]}, {"answer": "D", "type": "单选", "name": "<p>设有C#语句：int a=5,b=4;&nbsp;</p><p>则下列表示条件的表达式中值为“假”的是()</p><p><br></p>", "options": [{"option_name": "A", "content": "(b>=0)&&(a<=b?A+b:a-b)>0"}, {"option_name": "B", "content": "(a>b)&&(b>0&&a>0)"}, {"option_name": "C", "content": "(a<=0)||(a%b>0)"}, {"option_name": "D", "content": "a>0&&!(b>0)"}]}, {"answer": "D", "type": "单选", "name": "What is the result of the following program?<pre class=\"brush:cpp;toolbar:false\">char*&nbsp;f(char&nbsp;*str,&nbsp;char&nbsp;ch)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;*it1&nbsp;=&nbsp;str;\r\n&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;*it2&nbsp;=&nbsp;str;\r\n&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(*it2&nbsp;!=&nbsp;'\\0')&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(*it2&nbsp;==&nbsp;ch)&nbsp;{&nbsp;it2++;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*it1++&nbsp;=&nbsp;*it2++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;str;\r\n}\r\nvoid&nbsp;main(int&nbsp;argc,&nbsp;char&nbsp;*argv[])&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;*a&nbsp;=&nbsp;new&nbsp;char[10];\r\n&nbsp;&nbsp;&nbsp;&nbsp;strcpy(a,&nbsp;\"abcdcccd\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;f(a,&nbsp;'c');\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "abdcccd"}, {"option_name": "B", "content": "abdd"}, {"option_name": "C", "content": "abcc"}, {"option_name": "D", "content": "abddcccd"}, {"option_name": "E", "content": "Access Violation"}]}, {"answer": "A", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">main()\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;char*a[]={\"work\",\"at\",\"alibaba\"};\r\n&nbsp;&nbsp;&nbsp;&nbsp;char**pa=a;\r\n&nbsp;&nbsp;&nbsp;&nbsp;pa++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%s\",*pa);\r\n}</pre><p>下列程序的执行结果是()<br></p>", "options": [{"option_name": "A", "content": "at"}, {"option_name": "B", "content": "atalibaba"}, {"option_name": "C", "content": "ork"}, {"option_name": "D", "content": "orkatalibaba"}, {"option_name": "E", "content": "编译错误"}, {"option_name": "F", "content": "运行溢出"}]}, {"answer": "B", "type": "单选", "name": "<p>C#的数据类型有？</p>", "options": [{"option_name": "A", "content": "值类型和调用类型"}, {"option_name": "B", "content": "值类型和引用类型"}, {"option_name": "C", "content": "引用类型和关系类型"}, {"option_name": "D", "content": "关系类型和调用类型"}]}, {"answer": "D", "type": "单选", "name": "<p>排序方法中，从未排序序列中挑选元素，并将其一次插入已排序序列（初始时为空）的一端的方法，称为（ ）。</p>", "options": [{"option_name": "A", "content": "希尔排序"}, {"option_name": "B", "content": "归并排序"}, {"option_name": "C", "content": "插入排序"}, {"option_name": "D", "content": "选择排序"}]}, {"answer": "C", "type": "单选", "name": "<p>以下的命令将在（ &nbsp; &nbsp; &nbsp;）自动执行：06 03 * * 03 lp /usr/local/message | mail -s \"server message\" root</p>", "options": [{"option_name": "A", "content": "每周三06：03分"}, {"option_name": "B", "content": "每周六03：03分"}, {"option_name": "C", "content": "每周三03：06分"}, {"option_name": "D", "content": "每周六03：06分"}]}, {"answer": "B", "type": "单选", "name": "<p>linux下给文件start.sh设置权限为自己可读可修改可执行,组内用户为可读可执行不可修改,其余用户没有任何权限,那么设置该文件权限的命令为( &nbsp; )</p>", "options": [{"option_name": "A", "content": "chmod start.sh 706<br>"}, {"option_name": "B", "content": "chmod start.sh 750<br>"}, {"option_name": "C", "content": "chmod start.sh 705<br>"}, {"option_name": "D", "content": "chmod start.sh 777"}]}, {"answer": "D", "type": "单选", "name": "<p>关于c++的inline关键字,以下说法正确的是()<br></p>", "options": [{"option_name": "A", "content": "使用inline关键字的函数会被编译器在调用处展开"}, {"option_name": "B", "content": "头文件中可以包含inline函数的声明"}, {"option_name": "C", "content": "可以在同一个项目的不同源文件内定义函数名相同但实现不同的inline函数"}, {"option_name": "D", "content": "定义在Class声明内的成员函数默认是inline函数"}, {"option_name": "E", "content": "优先使用Class声明内定义的inline函数<br>"}, {"option_name": "F", "content": "优先使用Class实现的内inline函数的实现"}]}, {"answer": "C", "type": "单选", "name": "<p>对{05,46,13,55,94,17,42}进行基数排序,一趟排序的结果是:( &nbsp; )</p>", "options": [{"option_name": "A", "content": "05,46,13,55,94,17,42"}, {"option_name": "B", "content": "05,13,17,42,46,55,94"}, {"option_name": "C", "content": "42,13,94,05,55,46,17"}, {"option_name": "D", "content": "05,13,46,55,17,42,94"}]}, {"answer": "C", "type": "单选", "name": "下列关于C#中索引器理解正确的是？", "options": [{"option_name": "A", "content": "索引器的参数必须是两个或两个以上"}, {"option_name": "B", "content": "索引器的参数类型必须是整数型"}, {"option_name": "C", "content": "索引器没有名字"}, {"option_name": "D", "content": "其余说法均不正确"}]}, {"answer": "B", "type": "单选", "name": "<p>下面( &nbsp; &nbsp;)哪个函数返回的有效句柄用完后不需要CloseHandle</p>", "options": [{"option_name": "A", "content": "CreateThread"}, {"option_name": "B", "content": "GetCurrentProcess"}, {"option_name": "C", "content": "OpenProcess"}, {"option_name": "D", "content": "CreateFile"}]}, {"answer": "B", "type": "单选", "name": "Initialize integer i as 0, what's the value of i after the following operation?<p>i&nbsp;+=&nbsp;i&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;i++&nbsp;:&nbsp;i--;<br></p><p><br></p>", "options": [{"option_name": "A", "content": "-2"}, {"option_name": "B", "content": "-1"}, {"option_name": "C", "content": "0"}, {"option_name": "D", "content": "1"}, {"option_name": "E", "content": "2"}]}, {"answer": "ABC", "type": "不定项选择", "name": "<p>下面说法哪些是正确的？（ &nbsp; &nbsp; ）</p>", "options": [{"option_name": "A", "content": "const int a; // a 是常数"}, {"option_name": "B", "content": "int const a; // a 是常数"}, {"option_name": "C", "content": "int const *a; // a 是常量指针"}, {"option_name": "D", "content": "const int *a; // a 是指针常量"}, {"option_name": "E", "content": "int const *a; // a 是指针常量"}]}, {"answer": "D", "type": "单选", "name": "<p>invalidateRect的作用是()</p>", "options": [{"option_name": "A", "content": "擦除一个矩形区域"}, {"option_name": "B", "content": "删除一个矩形"}, {"option_name": "C", "content": "使一个矩形区域变为无效,从而释放部分GDI资源"}, {"option_name": "D", "content": "使一个矩形区域变为无效,从而可以重绘"}]}, {"answer": "C", "type": "单选", "name": "<p>忘记root口令或系统维护时需要进入单用户模式,进入单用户模式的参数（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）</p>", "options": [{"option_name": "A", "content": "boot"}, {"option_name": "B", "content": "admin"}, {"option_name": "C", "content": "single"}, {"option_name": "D", "content": "root"}]}, {"answer": "D", "type": "单选", "name": "<p>如下代码的输出是：（ &nbsp; &nbsp; &nbsp;）</p><pre class=\"brush:java;toolbar:false\">x&nbsp;=&nbsp;[&nbsp;10,8,-1,&nbsp;100,200,&nbsp;35]\r\nmx&nbsp;=&nbsp;x[0]for&nbsp;i&nbsp;in&nbsp;range(&nbsp;0&nbsp;,&nbsp;&nbsp;len(x)&nbsp;):&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;&nbsp;mx&nbsp;&lt;&nbsp;x[i]&nbsp;&nbsp;:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mx&nbsp;=&nbsp;x[i]\r\nprint(&nbsp;\"mx=\",mx)</pre><p><br></p>", "options": [{"option_name": "A", "content": "mx=100"}, {"option_name": "B", "content": "mx=35"}, {"option_name": "C", "content": "mx=-1"}, {"option_name": "D", "content": "mx=200"}]}, {"answer": "ABCD", "type": "不定项选择", "name": "<p>软件验收测试的合格通过准则是：</p>", "options": [{"option_name": "A", "content": "软件需求分析说明书中定义的所有功能已全部实现，性能指标全部达到要求。"}, {"option_name": "B", "content": "所有测试项没有残余一级、二级和三级错误。"}, {"option_name": "C", "content": "立项审批表、需求分析文档、设计文档和编码实现一致。"}, {"option_name": "D", "content": "验收测试工件齐全。"}]}, {"answer": "A", "type": "单选", "name": "<p>计算一个任意三角形的面积，S=√(p(p-a)(p-b)(p-c)),p=(a+b+c)/2,以下等价类测试用例中，不属于无效等价类的是（）</p>", "options": [{"option_name": "A", "content": "a=5，b=3，c=6;"}, {"option_name": "B", "content": "a=2，b=3，c=5;"}, {"option_name": "C", "content": "a=7，b=3，c=3;"}, {"option_name": "D", "content": "a=2，b=6，c=3;"}]}], "company": "360", "name": "360 2016校园招聘 测试工程师", "id": "155", "year": "2016"}