{"url": "http://exercise.acmcoder.com/comp_test?paperId=73", "content": [{"answer": "C", "type": "单选", "name": "<p>系统当前已经加载的所有文件系统在_________文件中得到反映。</p>", "options": [{"option_name": "A", "content": "/usr/sbin/cfdisk"}, {"option_name": "B", "content": "/sbin/fdisk"}, {"option_name": "C", "content": "/etc/mtab"}, {"option_name": "D", "content": "/etc/fstab"}]}, {"answer": "C", "type": "单选", "name": "<p>设x和y是二叉树中的任意两个节点，若在先根序列中x在y之前，而在后根序列中x在y之后，则x和y的关系是().</p>", "options": [{"option_name": "A", "content": "x是y的右兄弟"}, {"option_name": "B", "content": "x是y的子孙"}, {"option_name": "C", "content": "x是y的祖先"}, {"option_name": "D", "content": "x是y的左兄弟"}]}, {"answer": "B", "type": "单选", "name": "<p>如果你使用一个普通账户telnet远程登录到linux系统中，如何改变身份以root权限管理系统？</p>", "options": [{"option_name": "A", "content": "chgrp"}, {"option_name": "B", "content": "su"}, {"option_name": "C", "content": "chusr"}, {"option_name": "D", "content": "chmod"}]}, {"answer": "C", "type": "单选", "name": "<p>十进制变量i的值为100，那么八进制的变量i的值为:</p>", "options": [{"option_name": "A", "content": "146"}, {"option_name": "B", "content": "148"}, {"option_name": "C", "content": "144"}, {"option_name": "D", "content": "142"}]}, {"answer": "C", "type": "单选", "name": "<p>Linux文件系统的文件都按其作用分门别类地放在相关的目录中，对于外部设备文件，一般应将其放在()目录中</p>", "options": [{"option_name": "A", "content": "/bin"}, {"option_name": "B", "content": "/etc"}, {"option_name": "C", "content": "/dev"}, {"option_name": "D", "content": "/lib"}]}, {"answer": "B", "type": "单选", "name": "<p>关于以下application,说法正确是什么？</p><pre class=\"brush:java;toolbar:false\">public&nbsp;class&nbsp;Test&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;x=10;\r\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;{x+=5;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;//4\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"x=\"+x);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;static{x/=3;};\r\n}//9</pre><p>&nbsp;</p>", "options": [{"option_name": "A", "content": "4行与9行不能通过编译，因为缺少方法名和返回类型"}, {"option_name": "B", "content": "编译通过，执行结果是：x=5"}, {"option_name": "C", "content": "编译通过，执行结果是：x=3"}, {"option_name": "D", "content": "9行不能通过编译，因为只能有一个静态初始化器"}]}, {"answer": "A", "type": "单选", "name": "<p>A派生出子类B，B派生出子类C，并且在java源代码中有如下声明：<br>1.A a0=new A();<br>2.A a1=new B();<br>3.A a2=new C();<br>以下哪个说法是正确的？</p><p></p>", "options": [{"option_name": "A", "content": "第1行,第2行和第3行的声明都是正确的"}, {"option_name": "B", "content": "第1,2,3行都能通过编译，但第2,3行运行时出错"}, {"option_name": "C", "content": "第1,2行能通过编译，但第3行编译出错"}, {"option_name": "D", "content": "只有第1行能通过编译"}]}, {"answer": "C", "type": "单选", "name": "<p>网络服务的daemon是:</p>", "options": [{"option_name": "A", "content": "netd"}, {"option_name": "B", "content": "httpd"}, {"option_name": "C", "content": "inetd"}, {"option_name": "D", "content": "lpd"}]}, {"answer": "A", "type": "单选", "name": "<p>有以下代码:</p><pre class=\"brush:java;toolbar:false\">class&nbsp;A{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;A(String&nbsp;str){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\npublic&nbsp;class&nbsp;Test{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;classa=new&nbsp;A(\"he\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;classb=new&nbsp;A(\"he\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(classa==classb);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>请问输出的结果是:</p>", "options": [{"option_name": "A", "content": "FALSE"}, {"option_name": "B", "content": "TRUE"}, {"option_name": "C", "content": "报错"}, {"option_name": "D", "content": "以上选项都不正确"}]}, {"answer": "D", "type": "单选", "name": "<p>以下哪项是类实例化的语句？</p>", "options": [{"option_name": "A", "content": "varName ClassName=new varName();"}, {"option_name": "B", "content": "ClassName varName=new ClassName(new ClassName);"}, {"option_name": "C", "content": "ClassName varName=ClassName();"}, {"option_name": "D", "content": "ClassName varName=new ClassName();"}]}, {"answer": "C", "type": "单选", "name": "<p>考虑下面这个简单的例子，让我们看看reflection是如何工作的。</p><pre class=\"brush:java;toolbar:false\">import&nbsp;java.lang.reflect.*;\r\npublic&nbsp;class&nbsp;DumpMethods{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&nbsp;c=Class.forName(args[0]);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;m[]=c.getDeclaredMethods();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;m.length;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(m[i].toString());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Throwable&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>其中\"c.getDeclaredMethods\"的作用是:</p>", "options": [{"option_name": "A", "content": "取得类的公有方法对象"}, {"option_name": "B", "content": "取得类的所有公有方法名称"}, {"option_name": "C", "content": "取得类的所有方法对象"}, {"option_name": "D", "content": "以上选项都不正确"}]}, {"answer": "D", "type": "单选", "name": "<p>有两个完全相同的正方体，各面分别有数字1,2,3,4,5,6.把两个正方体放到桌子上，正面的数字加起来等于偶数的情形有多少种()(提示：1+3与3+1是一种情况）</p>", "options": [{"option_name": "A", "content": "24"}, {"option_name": "B", "content": "9"}, {"option_name": "C", "content": "18"}, {"option_name": "D", "content": "12"}]}, {"answer": "B", "type": "单选", "name": "<p>如果希望监听TCP端口9000，应该怎样创建socket?</p>", "options": [{"option_name": "A", "content": "new Socket(\"localhost\",9000);"}, {"option_name": "B", "content": "new ServerSocket(9000);"}, {"option_name": "C", "content": "new Socket(9000);"}, {"option_name": "D", "content": "new ServerSocket(\"localhost\",9000);"}]}, {"answer": "D", "type": "单选", "name": "<p>如果某测试用例集实现了某软件的路径覆盖，那么它一定同时实现了该软件的</p>", "options": [{"option_name": "A", "content": "条件覆盖"}, {"option_name": "B", "content": "判定/条件覆盖"}, {"option_name": "C", "content": "组合覆盖"}, {"option_name": "D", "content": "判定覆盖"}]}, {"answer": "C", "type": "单选", "name": "<p>以下选项中循环结构合法的是:</p>", "options": [{"option_name": "A", "content": "while(int i<7){i++;System.out.println(\"i is \"+i);}"}, {"option_name": "B", "content": "int j=3;while(j){ System.out.println(\"j is \"+j);}"}, {"option_name": "C", "content": "int j=0;for(int k=0;j+k!=10;j++,k++){System.out.println(\"j is \"+j+\"k is\" +k);}"}, {"option_name": "D", "content": "int j=0; do{System.out.println(\"j is \"+j++);if(j==3){continue loop;}}while(j<10);"}]}], "company": "爱奇艺", "name": "爱奇艺2016校园招聘 测试开发工程师", "id": "73"}