{"url": "http://exercise.acmcoder.com/comp_test?paperId=154", "content": [{"answer": "C", "type": "单选", "name": "<p>下面对析构函数的正确描述是：</p>", "options": [{"option_name": "A", "content": "系统不能提供默认的析构函数"}, {"option_name": "B", "content": "析构函数必须由用户定义"}, {"option_name": "C", "content": "析构函数没有参数"}, {"option_name": "D", "content": "析构函数可以设置默认参数"}]}, {"answer": "B", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">int&nbsp;a=0;\r\nclass&nbsp;someClass{\r\n&nbsp;&nbsp;&nbsp;int&nbsp;b;\r\n&nbsp;&nbsp;&nbsp;static&nbsp;int&nbsp;c;\r\n};\r\nint&nbsp;main(){\r\n&nbsp;&nbsp;&nbsp;int&nbsp;d=0;\r\n&nbsp;&nbsp;&nbsp;someClass&nbsp;*p=new&nbsp;someClass();\r\n&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p>关于以上代码中的变量在内存中的存储位置描述不正确的是( &nbsp; &nbsp;)<br></p>", "options": [{"option_name": "A", "content": "b存在堆区"}, {"option_name": "B", "content": "c存在堆区"}, {"option_name": "C", "content": "d存在栈区"}, {"option_name": "D", "content": "<p>a存在全局变量区</p>"}]}, {"answer": "B", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream&gt;\r\n#include&lt;string&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nclass&nbsp;A\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;friend&nbsp;long&nbsp;fun(A&nbsp;s)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s.x&lt;3)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;s.x+fun(A(s.x&nbsp;-&nbsp;1));\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\npublic:\r\n&nbsp;&nbsp;&nbsp;&nbsp;A(long&nbsp;a)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;a--;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\nprivate:\r\n&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;x;\r\n};\r\nint&nbsp;main()\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;sum=0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;int&nbsp;i=0;&nbsp;i&lt;5;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;fun(A(i));\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;sum;\r\n}</pre><p>代码运行结果是？</p>", "options": [{"option_name": "A", "content": "21"}, {"option_name": "B", "content": "15"}, {"option_name": "C", "content": "9"}, {"option_name": "D", "content": "36"}]}, {"answer": "ABD", "type": "多选", "name": "<p>bash文件运算符有（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）</p>", "options": [{"option_name": "A", "content": "d"}, {"option_name": "B", "content": "f"}, {"option_name": "C", "content": "o"}, {"option_name": "D", "content": "s"}]}, {"answer": "CDE", "type": "不定项选择", "name": "<p>Consider the following code:</p><p>Integer s=new Integer(9);</p><p>Integer t=new Integer(9);</p><p>Long u=new Long(9);</p><p>Which test would return true?</p><p><br></p>", "options": [{"option_name": "A", "content": "(s==u)"}, {"option_name": "B", "content": "(s==t)"}, {"option_name": "C", "content": "(s.equals(t))"}, {"option_name": "D", "content": "(s.equals(9))"}, {"option_name": "E", "content": "(s.equals(new Integer(9))"}]}, {"answer": "B", "type": "单选", "name": "<p>哪个指令是将所有缓冲区的内容写入到磁盘？</p>", "options": [{"option_name": "A", "content": "save"}, {"option_name": "B", "content": "sync"}, {"option_name": "C", "content": "edbuff"}, {"option_name": "D", "content": "flush"}]}, {"answer": "B", "type": "单选", "name": "<p>请阅读下面代码片段并且回答问题：<br></p><pre class=\"brush:cpp;toolbar:false\">#define&nbsp;SIZE_20M&nbsp;(20*1024*1024)\r\nvoid&nbsp;func_a()\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;*temp&nbsp;=&nbsp;malloc(SIZE_20M)\r\n&nbsp;&nbsp;&nbsp;&nbsp;return;\r\n}\r\nvoid&nbsp;func_b()\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;temp[SIZE_20M];\r\n&nbsp;&nbsp;&nbsp;&nbsp;//...do&nbsp;something&nbsp;using&nbsp;temp\r\n&nbsp;&nbsp;&nbsp;&nbsp;return;\r\n}</pre><p>关于这段代码，下列说法正确的是( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "func_a 获得临时内存的方式效率通常更高"}, {"option_name": "B", "content": "func_b 使用了太多的栈，程序可能会在运行时候崩溃"}, {"option_name": "C", "content": "func_b 存在内存泄露"}, {"option_name": "D", "content": "func_a 和func_b 分配的内存会自动初始化0"}]}, {"answer": "B", "type": "单选", "name": "<p>一个节点数&gt;5的树，至少删去几个结点才可以使该树不连通？</p>", "options": [{"option_name": "A", "content": "0"}, {"option_name": "B", "content": "1"}, {"option_name": "C", "content": "2"}, {"option_name": "D", "content": "3"}]}, {"answer": "B", "type": "单选", "name": "<p>执行程序<br></p><p>for file<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tr a-z A-Z &lt; $file &gt; $file<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; done<br>的结果是（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）<br></p><p><br></p>", "options": [{"option_name": "A", "content": "查找文件中的字母"}, {"option_name": "B", "content": "把文件中的小写转换为大写"}, {"option_name": "C", "content": "统计文件中的字母"}, {"option_name": "D", "content": "删除文件中的字母"}]}, {"answer": "D", "type": "单选", "name": "<p>下列程序段，循环体执行次数是( &nbsp; &nbsp;)：<br></p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;y&nbsp;=&nbsp;2;\r\nwhile&nbsp;(y&nbsp;&lt;=&nbsp;8)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;y&nbsp;+&nbsp;y;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "2"}, {"option_name": "B", "content": "16"}, {"option_name": "C", "content": "4"}, {"option_name": "D", "content": "3"}]}, {"answer": "D", "type": "单选", "name": "<p>下面关于垃圾收集的描述哪个是错误的？</p>", "options": [{"option_name": "A", "content": "使用垃圾收集的程序不需要明确释放对象"}, {"option_name": "B", "content": "现代垃圾收集能够处理循环引用问题"}, {"option_name": "C", "content": "垃圾收集能提高程序员效率"}, {"option_name": "D", "content": "使用垃圾收集的语言没有内在泄漏问题"}]}, {"answer": "D", "type": "单选", "name": "<p>下面哪种机制可以用来进行进程间通信( &nbsp; &nbsp;)?</p>", "options": [{"option_name": "A", "content": "Socket"}, {"option_name": "B", "content": "PIPE"}, {"option_name": "C", "content": "SHARED MEMORY"}, {"option_name": "D", "content": "以上皆可"}]}, {"answer": "ABCD", "type": "不定项选择", "name": "<p>做好文档测试需要注意的点有哪些?</p>", "options": [{"option_name": "A", "content": "仔细阅读，跟随每个步骤，检查每个图形，尝试每个示例"}, {"option_name": "B", "content": "检查文档的编写是否满足文档编写的目的"}, {"option_name": "C", "content": "内容是否齐全，正确，完善"}, {"option_name": "D", "content": "标记是否正确"}]}, {"answer": "A", "type": "单选", "name": "<p>如果把传输速率定义为单位时间内传送的信息量（以字节计算）多少。关于一下几种典型的数据传输速率：</p><p>1.使用USB2.0闪存盘，往USB闪存盘上拷贝文件的数据传输速率</p><p>2.使用100M以太网，在局域网内拷贝大文件时网络上的数据传输速率</p><p>3.使用一辆卡车拉1000块单块1TB装满数据的硬盘，以100km/h的速度从上海到天津（100km）一趟所等价的数据传输带宽</p><p>4.使用电脑播放MP3，电脑的PCI总线到声卡的数据传输速率</p><p>在通常情况下，关于这几个传输速率的排序正确的是( &nbsp; &nbsp;)</p><p><br></p>", "options": [{"option_name": "A", "content": "4<1<2<3"}, {"option_name": "B", "content": "1<4<2<3"}, {"option_name": "C", "content": "4<1<3<2"}, {"option_name": "D", "content": "1<4<3<2"}]}, {"answer": "B", "type": "单选", "name": "<p>表toutiao_tb &nbsp;&nbsp;<br></p><p>title &nbsp; data &nbsp; &nbsp; &nbsp; auther &nbsp;type</p><p>abc &nbsp; &nbsp; 2016.2.23 &nbsp; bob &nbsp; &nbsp; 1</p><p>bcv &nbsp; &nbsp; 2016.3.3 &nbsp; &nbsp;http &nbsp; &nbsp;1</p><p>cvt &nbsp; &nbsp; 2016.3.3 &nbsp; &nbsp;http &nbsp; &nbsp;1</p><p>bcvvcm &nbsp;2016.3.5 &nbsp; &nbsp;js &nbsp; &nbsp; &nbsp;2</p><p>nmhh &nbsp; &nbsp;2016.2.3 &nbsp; &nbsp;html &nbsp; &nbsp;2</p><p>hhj &nbsp; &nbsp; 2016.3.3 &nbsp; &nbsp;java &nbsp; &nbsp;3</p><p>rrr &nbsp; &nbsp; 2016.3.2 &nbsp; &nbsp;cc &nbsp; &nbsp; &nbsp;1</p><p><br>查询title中包含cv且type是1的记录<br></p>", "options": [{"option_name": "A", "content": "<p>select * from where title = \"cv\" and type=\"1\"</p>"}, {"option_name": "B", "content": "select * from where title = \"%cv%\" and type=\"1\"<br>"}, {"option_name": "C", "content": "select * from where title = \"*cv\" and type=\"1\"<br>"}, {"option_name": "D", "content": "<p>select * from where title =\"*cv*\" and type=\"1\"</p>"}]}, {"answer": "C", "type": "单选", "name": "<p>以下的命令将在（ &nbsp; &nbsp; &nbsp;）自动执行：06 03 * * 03 lp /usr/local/message | mail -s \"server message\" root</p>", "options": [{"option_name": "A", "content": "每周三06：03分"}, {"option_name": "B", "content": "每周六03：03分"}, {"option_name": "C", "content": "每周三03：06分"}, {"option_name": "D", "content": "每周六03：06分"}]}, {"answer": "B", "type": "单选", "name": "<p>如下代码输出是？（ &nbsp; &nbsp; ）</p><pre class=\"brush:java;toolbar:false\">class&nbsp;Parent(object):\r\n&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;1\r\n&nbsp;class&nbsp;Child1(Parent):\r\n&nbsp;&nbsp;&nbsp;&nbsp;pass\r\n&nbsp;class&nbsp;Child2(Parent):\r\n&nbsp;&nbsp;&nbsp;&nbsp;pass\r\n&nbsp;print&nbsp;Parent.x,&nbsp;Child1.x,&nbsp;Child2.x\r\nChild1.x&nbsp;=&nbsp;2print&nbsp;Parent.x,&nbsp;Child1.x,&nbsp;Child2.x\r\nParent.x&nbsp;=&nbsp;3print&nbsp;Parent.x,&nbsp;Child1.x,&nbsp;Child2.x</pre><p><br></p>", "options": [{"option_name": "A", "content": "1 2 3<br>1 2 1<br>3 2 1<br>"}, {"option_name": "B", "content": "1 1 1<br>1 2 1<br>3 2 3<br>"}, {"option_name": "C", "content": "1 1 1<br>1 2 1<br>3 2 1<br>"}, {"option_name": "D", "content": "1 1 3<br>1 2 1 <br>3 2 1<br>"}]}, {"answer": "D", "type": "单选", "name": "<p>有以下程序运行结果为:<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nchar&nbsp;fun(char&nbsp;x,&nbsp;char&nbsp;y)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x&nbsp;&lt;&nbsp;y)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;y;\r\n}\r\nint&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;a&nbsp;=&nbsp;'1',&nbsp;b&nbsp;=&nbsp;'1',&nbsp;c&nbsp;=&nbsp;'2';\r\n&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;fun(fun(a,&nbsp;b),&nbsp;fun(b,&nbsp;c));\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "运行出错"}, {"option_name": "B", "content": "2"}, {"option_name": "C", "content": "3"}, {"option_name": "D", "content": "1"}]}, {"answer": "AD", "type": "多选", "name": "<p>假设MySQL数据库表:</p><pre class=\"brush:cpp;toolbar:false\">create&nbsp;table&nbsp;T{\r\nk&nbsp;int&nbsp;unsigned&nbsp;not&nbsp;null&nbsp;auto_increment,\r\na&nbsp;date,\r\nb&nbsp;varchar(24),\r\nc&nbsp;int,d&nbsp;varchar(24),\r\nprimary&nbsp;key(k),unique&nbsp;key&nbsp;a_index&nbsp;(a&nbsp;DESC,b&nbsp;DESC),\r\nkey&nbsp;k1(b),key&nbsp;k2(c),key&nbsp;k3(d));</pre><p>如下哪些sql语句查询能较好的利用索引?( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "select b from WHERE b like \"aaa%\"; "}, {"option_name": "B", "content": "select a,b from T WHERE a=\"2015-10-25\" ORDER BY b ASC,c ASC;"}, {"option_name": "C", "content": "select a,b,c from T WHERE a=\"2015-10-25\" ORDER BY b ASC;"}, {"option_name": "D", "content": "<p>select a,b,c from T WHERE a=\"2015-10-25\" ORDER BY a,b;</p>"}]}, {"answer": "D", "type": "单选", "name": "<p>以下意图那个是用来描述 OBSERVER（观察者）?（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）</p>", "options": [{"option_name": "A", "content": "将抽象部分与它的实现部分分离，使它们都可以独立地变化"}, {"option_name": "B", "content": "使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系"}, {"option_name": "C", "content": "用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象"}, {"option_name": "D", "content": "定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新"}]}, {"answer": "A", "type": "单选", "name": "<p>下面关于类定义的说法中，正确的是:</p>", "options": [{"option_name": "A", "content": "类定义中包括数据成员和函数成员的声明"}, {"option_name": "B", "content": "类成员的缺省访问权限是保护的"}, {"option_name": "C", "content": "数据成员必须被声明为私有的"}, {"option_name": "D", "content": "成员函数只能在类体外进行定义"}]}, {"answer": "C", "type": "单选", "name": "<p>在公有派生的情况下，派生类中定义的成员函数只能访问原基类的( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "公有成员和私有成员"}, {"option_name": "B", "content": "私有成员和保护成员"}, {"option_name": "C", "content": "公有成员和保护成员"}, {"option_name": "D", "content": "私有成员,保护成员和公有成员"}]}, {"answer": "C", "type": "单选", "name": "<p>有如下一段程序：<br></p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;f1(float);\r\nint&nbsp;f2(char);\r\nint&nbsp;f3(float);\r\nint&nbsp;f4(float);\r\nint&nbsp;(*pf)(float);</pre><p>则以下不合法的是:( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "int (*p)(float)=&f1;"}, {"option_name": "B", "content": "pf=&f4;"}, {"option_name": "C", "content": "pf=&f2;"}, {"option_name": "D", "content": "pf=f3;"}]}, {"answer": "D", "type": "单选", "name": "<p>对以下程序，正确的输出结果是( &nbsp; &nbsp;)<br></p><pre class=\"brush:cpp;toolbar:false\">#include&nbsp;&lt;stdio.h&gt;\r\n#define&nbsp;SUB(x,y)&nbsp;x-y\r\n#define&nbsp;ACCESS_BEFORE(element,offset,value)&nbsp;*SUB(&amp;element,&nbsp;offset)&nbsp;=&nbsp;value\r\nint&nbsp;main()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;array[10]&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9,&nbsp;10&nbsp;};\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;\r\n&nbsp;&nbsp;&nbsp;&nbsp;ACCESS_BEFORE(array[5],&nbsp;4,&nbsp;6);\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"array:&nbsp;\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;++i)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%d\",&nbsp;array[i]);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\n\");\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(0);\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "array: 1 6 3 4 5 6 7 8 9 10"}, {"option_name": "B", "content": "array: 6 2 3 4 5 6 7 8 9 10"}, {"option_name": "C", "content": "程序可以正确编译连接，但是运行时会崩溃"}, {"option_name": "D", "content": "程序语法错误，编译不成功"}]}, {"answer": "D", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">#include&nbsp;&lt;iostream&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nint&nbsp;f(int&nbsp;n){\r\n&nbsp;&nbsp;if&nbsp;(n==1)\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;else\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f(n-1)+n*n*n);\r\n}\r\nint&nbsp;main(){\r\n&nbsp;&nbsp;int&nbsp;s=f(3);\r\n&nbsp;&nbsp;cout&lt;&lt;s&lt;&lt;endl;\r\n&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p>运行结果是？</p>", "options": [{"option_name": "A", "content": "8"}, {"option_name": "B", "content": "9"}, {"option_name": "C", "content": "27"}, {"option_name": "D", "content": "36"}]}, {"answer": "C", "type": "单选", "name": "<p>在局域网络内的某台主机用ping命令测试网络连接时发现网络内部的主机都可以连同，而不能与公网连通，问题可能是（）。</p>", "options": [{"option_name": "A", "content": "主机IP设置有误"}, {"option_name": "B", "content": "没有设置连接局域网的网关"}, {"option_name": "C", "content": "局域网的网关或主机的网关设置有误"}, {"option_name": "D", "content": "局域网DNS服务器设置有误"}]}, {"answer": "B", "type": "单选", "name": "<p>有序数组1 2 3 4 5 6 7 8 9查找3的二分查找序列是:</p>", "options": [{"option_name": "A", "content": "1->2->3"}, {"option_name": "B", "content": "5->2->3"}, {"option_name": "C", "content": "9->5->3"}, {"option_name": "D", "content": "5->1->4->3"}]}, {"answer": "A", "type": "单选", "name": "<p>如果我们可以通过覆盖率检测来判断我们是否对所有的路径都进行了测试，但是仍然可能存在未被检测出来的缺陷，原因是（ &nbsp; ）</p>", "options": [{"option_name": "A", "content": "全部选项<br>"}, {"option_name": "B", "content": "程序可能因为缺某些路径而存在问题<br>"}, {"option_name": "C", "content": "穷举路径的测试可能不好暴露数据敏感的错误<br>"}, {"option_name": "D", "content": "就算穷举路径测试也不能保证程序符合需求<br>"}]}, {"answer": "C", "type": "单选", "name": "<pre class=\"brush:cpp;toolbar:false\">#include&lt;stdio.h&gt;\r\nint&nbsp;main()\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;char&nbsp;i=7;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;j=0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;for(;i&gt;0;i-=3)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++j;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%d\\n\",j);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p>问该程序的输出是多少?<br></p>", "options": [{"option_name": "A", "content": "2"}, {"option_name": "B", "content": "死循环"}, {"option_name": "C", "content": "173"}, {"option_name": "D", "content": "172"}]}, {"answer": "A", "type": "单选", "name": "<p>Consider the following definition of a recursive function, power, that will perform exponentiation.<br></p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;power(int&nbsp;b,&nbsp;int&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e&nbsp;==&nbsp;0)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e&nbsp;%2&nbsp;==&nbsp;0)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;power&nbsp;(b&nbsp;*&nbsp;b,&nbsp;e&nbsp;/&nbsp;2);\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;b&nbsp;*&nbsp;power(b&nbsp;*&nbsp;b,&nbsp;e&nbsp;/&nbsp;2);\r\n}</pre><p>Asymptotically (渐进地) in terms of the exponent e, the number of calls to power that occur as a result of the call power(b, e) is</p>", "options": [{"option_name": "A", "content": "logarithmic<br>"}, {"option_name": "B", "content": "linear<br>"}, {"option_name": "C", "content": "quadratic<br>"}, {"option_name": "D", "content": "exponential<br>"}]}, {"answer": "A", "type": "单选", "name": "<p>下列关于对象数组的描述中，( &nbsp; )是错误的.</p>", "options": [{"option_name": "A", "content": "对象数组只能赋初值而不能再赋值"}, {"option_name": "B", "content": "对象数组的每个元素是同一个类的对象"}, {"option_name": "C", "content": "对象数组的数组名是一个常量指针"}, {"option_name": "D", "content": "对象数组的下标是从0开始的"}]}, {"answer": "AD", "type": "不定项选择", "name": "<p>假设MySQL数据库表:</p><p>create table T{</p><p>k int unsigned not null auto_increment,</p><p>a date,</p><p>b varchar(24),</p><p>c int,d varchar(24),</p><p>primary key(k),unique key a_index (a DESC,b DESC),</p><p>key k1(b),key k2(c),key k3(d));</p><p>如下哪些sql语句查询能较好的利用索引?( &nbsp; &nbsp;)</p><p><br></p>", "options": [{"option_name": "A", "content": "select b from WHERE b like \"aaa%\"; "}, {"option_name": "B", "content": "select a,b from T WHERE a=\"2015-10-25\" ORDER BY b ASC,c ASC;"}, {"option_name": "C", "content": "select a,b,c from T WHERE a=\"2015-10-25\" ORDER BY b ASC;"}, {"option_name": "D", "content": "<p>select a,b,c from T WHERE a=\"2015-10-25\" ORDER BY a,b;</p>"}]}, {"answer": "B", "type": "单选", "name": "<p>以下程序是用来计算两个非负数之间的最大公约数：<br></p><pre class=\"brush:cpp;toolbar:false\">long&nbsp;long&nbsp;gcd(long&nbsp;long&nbsp;x,&nbsp;long&nbsp;long&nbsp;y)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(y&nbsp;==&nbsp;0)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;\r\n&nbsp;&nbsp;&nbsp;&nbsp;else\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gcd(y,&nbsp;x&nbsp;%&nbsp;y);\r\n}</pre><p>我们假设x,y中最大的那个数的长度为n，基本运算时间复杂度为O(1)，那么该程序的时间复杂度为( &nbsp; )</p>", "options": [{"option_name": "A", "content": "O(1)"}, {"option_name": "B", "content": "O(logn)"}, {"option_name": "C", "content": "O(n)"}, {"option_name": "D", "content": "O(n^2)"}]}, {"answer": "D", "type": "单选", "name": "<p>下列算法中，没有使用贪心策略的是:</p>", "options": [{"option_name": "A", "content": "Prim算法"}, {"option_name": "B", "content": "Kruskal算法"}, {"option_name": "C", "content": "Dijkstra算法"}, {"option_name": "D", "content": "KMP算法"}]}, {"answer": "D", "type": "单选", "name": "<p>多个线程可同时操作一个数据，为了保证该数据的准确性，可将操作该数据的部分改为:</p>", "options": [{"option_name": "A", "content": "只写"}, {"option_name": "B", "content": "只读"}, {"option_name": "C", "content": "异步"}, {"option_name": "D", "content": "同步"}]}, {"answer": "C", "type": "单选", "name": "<p>有以下程序<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream&gt;\r\n#include&lt;stdio.h&gt;\r\nusing&nbsp;namespace&nbsp;std;\r\nint&nbsp;main(){\r\n&nbsp;&nbsp;int&nbsp;m=0123,&nbsp;n&nbsp;=&nbsp;123;\r\n&nbsp;&nbsp;printf(\"%o&nbsp;%o\\n\",&nbsp;m,&nbsp;n);\r\n&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p>程序运行后的输出结果是( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "0123 0173"}, {"option_name": "B", "content": "0123 173"}, {"option_name": "C", "content": "123 173"}, {"option_name": "D", "content": "173 173"}]}, {"answer": "D", "type": "单选", "name": "<p>以下代码段有问题的是( &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "void func1(char *e){  char *p1;  p1=malloc(100);  sprintf(p1,error:\"%s"}, {"option_name": "B", "content": "int func2(char *filename)  {    FILE *fp;    int key;    fp=fopen(filename,\"r\");    fscanf(fp,\"%d\",&key);    return key;   }"}, {"option_name": "C", "content": "void func3(char *info){  char *p,*pp;  p=malloc(100);  pp=p;  free(p);  sprintf(pp,*info:\"%s"}, {"option_name": "D", "content": "选项全部都正确"}]}, {"answer": "B", "type": "单选", "name": "<p>在linux编程中，以下哪个TCP的套接字选项与nagle算法的开启和关闭有关？</p>", "options": [{"option_name": "A", "content": "TCP_MAXSEG"}, {"option_name": "B", "content": "TCP_NODELAY"}, {"option_name": "C", "content": "TCP_SYNCNT"}, {"option_name": "D", "content": "TCP_KEEPALIVE"}]}, {"answer": "A", "type": "单选", "name": "<p>以下算法不能用于文本加密的是：</p>", "options": [{"option_name": "A", "content": "MD5"}, {"option_name": "B", "content": "RSA"}, {"option_name": "C", "content": "RC4"}, {"option_name": "D", "content": "DES"}]}, {"answer": "C", "type": "单选", "name": "<p>关于内联函数说法错误的是:</p>", "options": [{"option_name": "A", "content": "不是任何一个函数都可定义成内联函数"}, {"option_name": "B", "content": "内联函数的函数体内不能含有复杂的结构控制语句"}, {"option_name": "C", "content": "递归函数可以被用来作为内联函数"}, {"option_name": "D", "content": "内联图数一般适合于只有1~5行语句的小函数"}]}], "company": "360", "name": "360 2016校园招聘 测试开发工程师", "id": "154", "year": "2016"}