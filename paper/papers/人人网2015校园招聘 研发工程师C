{"year": "2015", "url": "http://exercise.acmcoder.com/comp_test?paperId=105", "content": [{"answer": "C", "type": "单选", "name": "<p>下列的进程状态变化中，哪些是不可能发生的？</p>", "options": [{"option_name": "A", "content": "运行→就绪"}, {"option_name": "B", "content": "运行→等待"}, {"option_name": "C", "content": "等待→运行    "}, {"option_name": "D", "content": "等待→就绪    "}]}, {"answer": "B", "type": "单选", "name": "<p>假设要存储一个数据集，数据维持有序，对其的操作只有插入、删除和顺序遍历，综合存储效率和运行速度，下列哪种数据结构是最适合的是？</p>", "options": [{"option_name": "A", "content": "数组"}, {"option_name": "B", "content": "链表"}, {"option_name": "C", "content": "哈希表"}, {"option_name": "D", "content": "队列"}]}, {"answer": "C", "type": "单选", "name": "<p>某32位系统下, C++程序如下所示，sizeof 的值应为？<br></p><pre class=\"brush:java;toolbar:false\">char&nbsp;str[]&nbsp;=&nbsp;“http://www.renren.com”&nbsp;&nbsp;（长度为21）\r\nchar&nbsp;*p&nbsp;=&nbsp;str&nbsp;;</pre><p>请计算<br></p><pre class=\"brush:java;toolbar:false\">sizeof&nbsp;(str&nbsp;)&nbsp;=&nbsp;？（1）\r\nsizeof&nbsp;(&nbsp;p&nbsp;)&nbsp;=&nbsp;？（2）\r\nvoid&nbsp;Foo&nbsp;(&nbsp;char&nbsp;str[100]){\r\n&nbsp;&nbsp;&nbsp;&nbsp;sizeof(&nbsp;str&nbsp;)&nbsp;=&nbsp;？（3）\r\n}\r\nvoid&nbsp;*p&nbsp;=&nbsp;malloc(&nbsp;100&nbsp;);\r\nsizeof&nbsp;(&nbsp;p&nbsp;)&nbsp;=&nbsp;？（4）</pre><p><br></p>", "options": [{"option_name": "A", "content": "22, 22, 100, 100"}, {"option_name": "B", "content": "4, 4, 4, 4"}, {"option_name": "C", "content": "22, 4, 4, 4"}, {"option_name": "D", "content": "22, 4, 100, 4"}]}, {"answer": "C", "type": "单选", "name": "<p>关于排序算法的以下说法，正确的是？</p>", "options": [{"option_name": "A", "content": "快速排序的平均时间复杂度为O(nlogn)，最坏时间复杂度为O(nlogn)"}, {"option_name": "B", "content": "堆排序的平均时间复杂度为O(nlogn)，最坏时间复杂度为O(n^2)"}, {"option_name": "C", "content": "冒泡排序的平均时间复杂度为O(n^2)，最坏时间复杂度为O(n^2)"}, {"option_name": "D", "content": "归并排序的平均时间复杂度为O(nlogn)，最坏时间复杂度为O(n^2)"}]}, {"answer": "B", "type": "单选", "name": "<p>有字符序列（Q,H,C,Y,P,A,M,S,R,D,F,X）,新序列（F,H,C,D,P,A,M,Q,R,S,Y,X）是下列（）排序算法一趟扫描结果。</p>", "options": [{"option_name": "A", "content": "堆排序"}, {"option_name": "B", "content": "快速排序"}, {"option_name": "C", "content": "希尔排序"}, {"option_name": "D", "content": "冒泡排序"}]}, {"answer": "D", "type": "单选", "name": "<p>设有n个关键字具有相同的Hash函数值，则用线性探测法把这n个关键字映射到Hash表中需要做几次线性探测？</p>", "options": [{"option_name": "A", "content": "n<sup>2</sup>"}, {"option_name": "B", "content": "n*(n+1)"}, {"option_name": "C", "content": "n*(n+1)/2"}, {"option_name": "D", "content": "n*(n-1)/2"}]}, {"type": "填空", "name": "<p>假设网络带宽是128MB/s，网络单向延时为100ms, 1000个客户端(单线程)同时向服务器传输64KB大小的文件，每个请求大小为64KB，服务器磁盘并发写入速度30MB/s，在传输过程中，服务器吞吐量为 1 MB/S ，单个请求响应时间为 2 ms</p>"}, {"type": "填空", "name": "<p>由权值分别为3，8，6，2，5的叶子结点生成一棵哈夫曼树，它的带权路径长度为 &nbsp; &nbsp; ？</p>"}, {"answer": "C", "type": "单选", "name": "<p>当用一台机器作为网络客户端时，该机器最多可以保持多少个到服务端的连接？</p>", "options": [{"option_name": "A", "content": "1"}, {"option_name": "B", "content": "少于1024"}, {"option_name": "C", "content": "少于65535"}, {"option_name": "D", "content": "无限制"}]}, {"answer": "D", "type": "单选", "name": "<p>以下哪些方式/命令不可以查看某IP是否可达？ &nbsp; &nbsp;</p>", "options": [{"option_name": "A", "content": "telnet"}, {"option_name": "B", "content": "ping"}, {"option_name": "C", "content": "tracert"}, {"option_name": "D", "content": "top"}]}, {"answer": "暂无", "type": "问答", "name": "<p>编辑距离，又称Levenshtein距离，是指两个子串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。请尝试写出一个算法来计算两个字符串的编辑距离，并计算其复杂度？在某些应用场景下，替换操作的代价比较高，假设替换操作的代价是插入和删除的两倍， 算法该如何调整？</p>"}, {"answer": "暂无", "type": "问答", "name": "<p>有一个链表，其中每个对象包含两个指针p1, p2，其中指针p1指向下一个对象，指针p2也指向一个对象，沿p1可以像普通链表一样完成顺序遍历，沿p2则可能会有重复。 一种可能的例子如下，其中实线箭头是p1, 虚线箭头是p2：<br><img src=\"http://bj.bcebos.com/v1/acmcoder/1948022555316773.jpg?authorization=bce-auth-v1%2F02fe1db0eea94e8480054b43acd6124f%2F2016-06-09T14%3A26%3A22Z%2F-1%2F%2Fa4414ad0a7601f2b725b92046b7b9529069ceb320f01502914474f06cb8b343b\" title=\"\" alt=\"\" width=\"447\" height=\"134\" style=\"width: 447px; height: 134px;\"><br></p><p>问题：设计函数，翻转这个链表，并返回头指针。链表节点的数据结构如下：</p><pre class=\"brush:java;toolbar:false\">struct&nbsp;Node{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;*&nbsp;p1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;*&nbsp;p2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;data;\r\n};</pre><p>函数定义如下：</p><p>Node * revert(Node* head);</p>"}, {"answer": "暂无", "type": "问答", "name": "<p>给定一棵二叉树，求各个路径的最大和，路径可以以任意节点作为起点和终点。</p><p>比如给定以下二叉树:</p><p>&nbsp; 2</p><p>&nbsp;/ &nbsp;\\\\</p><p>5 &nbsp; &nbsp;3</p><p>返回10。</p><pre class=\"brush:java;toolbar:false\">/**\r\n&nbsp;*&nbsp;Definition&nbsp;for&nbsp;binary&nbsp;tree\r\n&nbsp;*&nbsp;struct&nbsp;TreeNode&nbsp;{\r\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;val;\r\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode&nbsp;*left;\r\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode&nbsp;*right;\r\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode(int&nbsp;x)&nbsp;:&nbsp;val(x),&nbsp;left(NULL),&nbsp;right(NULL)&nbsp;{}\r\n&nbsp;*&nbsp;};\r\n&nbsp;*/\r\nint&nbsp;maxPathSum(TreeNode&nbsp;*root)</pre><p><br></p>"}, {"answer": "C", "type": "单选", "name": "<p>数据库事务正确执行的四个基本要素不包括?</p>", "options": [{"option_name": "A", "content": "隔离性"}, {"option_name": "B", "content": "持久性"}, {"option_name": "C", "content": "强制性"}, {"option_name": "D", "content": "一致性"}]}, {"answer": "C", "type": "单选", "name": "<p>若12*25=311成立， 则用的是几进制?</p>", "options": [{"option_name": "A", "content": "7"}, {"option_name": "B", "content": "8"}, {"option_name": "C", "content": "9"}, {"option_name": "D", "content": "11"}]}], "company": "人人网", "name": "人人网2015校园招聘 研发工程师C", "id": "105"}