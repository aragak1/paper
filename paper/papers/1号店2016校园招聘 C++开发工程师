{"url": "http://exercise.acmcoder.com/comp_test?paperId=114", "content": [{"answer": "B", "type": "单选", "name": "<p>有一个class A， 关于A的this指针，下面描述不正确的是 （ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "在Class A的const成员函数中它是一个const指针"}, {"option_name": "B", "content": "不能在class A成员函数中显式使用"}, {"option_name": "C", "content": "让Class A的每个对象指向它的地址"}, {"option_name": "D", "content": "隐性传递给class A的非静态成员函数作为参数"}]}, {"answer": "C", "type": "单选", "name": "<p>下面代码的输出结果是什么 ( &nbsp; &nbsp; &nbsp;)<br></p><pre class=\"brush:cpp;toolbar:false\">#include&nbsp;&lt;iostream&gt;using&nbsp;namespace&nbsp;std;class&nbsp;A\r\n{\tpublic:\tvoid&nbsp;virtual&nbsp;f()&nbsp;\r\n\t{\t\tcout&nbsp;&lt;&lt;&nbsp;\"A\"&nbsp;&lt;&lt;&nbsp;endl;\r\n\t}\r\n};class&nbsp;B&nbsp;:&nbsp;public&nbsp;A\r\n{\tpublic:\tvoid&nbsp;virtual&nbsp;f()\r\n\t{\t\tcout&nbsp;&lt;&lt;&nbsp;\"B\"&nbsp;&lt;&lt;&nbsp;endl;\r\n\t}\r\n};int&nbsp;main(){\r\n\tA&nbsp;*pa&nbsp;=&nbsp;new&nbsp;A();\r\n\tpa-&gt;f();\r\n\tB&nbsp;*pb=(B&nbsp;*)pa;\r\n\tpb-&gt;f();\tdelete&nbsp;pa,&nbsp;pb;\r\n\tpa=new&nbsp;B();\r\n\tpa-&gt;f();\r\n\tpb=(B&nbsp;*)pa;\r\n\tpb-&gt;f();\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "A A B A "}, {"option_name": "B", "content": "A B B A"}, {"option_name": "C", "content": "A A B B"}, {"option_name": "D", "content": "A A A B"}]}, {"answer": "B", "type": "单选", "name": "<p>以太网转换控制包是基于 （ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "源MAC地址"}, {"option_name": "B", "content": "目的IP地址 "}, {"option_name": "C", "content": "目的MAC地址"}, {"option_name": "D", "content": "源和目的IP地址"}]}, {"answer": "D", "type": "单选", "name": "<p>下面代码的输出结果是 （ &nbsp; &nbsp;）</p><pre class=\"brush:cpp;toolbar:false\">char&nbsp;var[10]int&nbsp;test(char&nbsp;var[]){&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sizeof(var);\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "11"}, {"option_name": "B", "content": "10"}, {"option_name": "C", "content": "9"}, {"option_name": "D", "content": "4"}]}, {"answer": "B", "type": "单选", "name": "<p>以下不能对二维数组a进行正确初始化的语句是（ &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;）</p>", "options": [{"option_name": "A", "content": "int a[][3] = {0, 1, 2, 3, 4, 5};"}, {"option_name": "B", "content": "int a[2][3] = {{0,1}, {2,3}, {4,5}}; "}, {"option_name": "C", "content": "int a[][3] = {{0,1},{0}};  "}, {"option_name": "D", "content": "int a[2][3] = {0}; "}]}, {"answer": "A", "type": "单选", "name": "<p>下面不能表示a[1]的是 &nbsp;( &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;)<br></p><p>&nbsp; &nbsp;int a[100]; &nbsp; &nbsp;int *p = a;<br></p><p></p><p><br></p>", "options": [{"option_name": "A", "content": "a++ "}, {"option_name": "B", "content": "p++"}, {"option_name": "C", "content": "a+1"}, {"option_name": "D", "content": "p+1"}]}, {"answer": "C", "type": "单选", "name": "<p>下面不属于TCP协议拥塞控制部分的是 （ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "快速重传 "}, {"option_name": "B", "content": "慢启动"}, {"option_name": "C", "content": "带外数据"}, {"option_name": "D", "content": "快速恢复 "}]}, {"answer": "C", "type": "单选", "name": "<p>32位机器上有一下代码<br></p><pre class=\"brush:cpp;toolbar:false\">#pragma&nbsp;pack(2)class&nbsp;A{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;union&nbsp;U{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;buff[13];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;u;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;foo(){}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;char*&nbsp;(*f)(void);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enum&nbsp;{red,&nbsp;green,&nbsp;blue}&nbsp;color;\r\n}&nbsp;a;</pre><p>sizeof(a)的值是 ( &nbsp; &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "20"}, {"option_name": "B", "content": "21"}, {"option_name": "C", "content": "22"}, {"option_name": "D", "content": "24"}]}, {"answer": "D", "type": "单选", "name": "<p>考虑下面的函数原型：<br></p><p>void testDefaulParam(int a,int b=7,char z='*'); <br></p><p></p><p>下面函数调用中不合法的 &nbsp; &nbsp;</p><p><br></p>", "options": [{"option_name": "A", "content": "testDefaulParam(5,8)"}, {"option_name": "B", "content": "testDefaulParam(5) "}, {"option_name": "C", "content": "testDefaulParam(0,0,"}, {"option_name": "D", "content": "testDefaulParam(5,"}]}, {"answer": "C", "type": "单选", "name": "<p>下列关于构造函数的描述中,错误的是 ( &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;)&nbsp;</p>", "options": [{"option_name": "A", "content": "构造函数在说明类变量时自动执行  "}, {"option_name": "B", "content": "构造函数可以设置默认参数"}, {"option_name": "C", "content": "构造函数可以对静态数据成员进行初始化 "}, {"option_name": "D", "content": "构造函数可以重载"}]}, {"answer": "B", "type": "单选", "name": "<p>当很频繁的对序列中部进行插入和删除操作时，应该选择使用的容器是（ &nbsp; &nbsp; &nbsp;）</p><p><br></p>", "options": [{"option_name": "A", "content": "stack"}, {"option_name": "B", "content": "list "}, {"option_name": "C", "content": "vector"}, {"option_name": "D", "content": "deque"}]}, {"answer": "B", "type": "单选", "name": "<p>一个类的友元函数能够访问该类的 &nbsp;( &nbsp; &nbsp; &nbsp;)&nbsp;</p><p><br></p>", "options": [{"option_name": "A", "content": "公有成员 "}, {"option_name": "B", "content": "所有成员"}, {"option_name": "C", "content": "保护成员"}, {"option_name": "D", "content": "私有成员"}]}, {"answer": "B", "type": "单选", "name": "<p>在多继承中，公有派生和私有派生对于基类成员的派生类中的可访问性与单继承的规则 是（ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "部分相同，部分不同  "}, {"option_name": "B", "content": "完全相同  "}, {"option_name": "C", "content": "完全不同"}, {"option_name": "D", "content": "其他三项都不对"}]}, {"answer": "B", "type": "单选", "name": "<p>&nbsp;Linux中，提供TCP/IP包过滤功能的软件叫什么？ &nbsp;( &nbsp; &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "route"}, {"option_name": "B", "content": "iptables"}, {"option_name": "C", "content": "rarp"}, {"option_name": "D", "content": "filter"}]}, {"answer": "C", "type": "单选", "name": "<p>C++ 中空类默认产生哪些类成员函数 （ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "缺省构造函数，缺省拷贝构造函数，缺省析构函数，缺省赋值运算符，缺省取址运算符"}, {"option_name": "B", "content": "缺省构造函数，缺省析构函数"}, {"option_name": "C", "content": "缺省构造函数，缺省拷贝构造函数，缺省析构函数，缺省赋值运算符，缺省取址运算符，缺省取址运算符 const"}, {"option_name": "D", "content": "缺省构造函数，缺省拷贝构造函数，缺省析构函数，缺省赋值运算符"}]}, {"answer": "C", "type": "单选", "name": "<p>以下哪种排序属于稳定排序 （ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "希尔排序"}, {"option_name": "B", "content": "快速排序"}, {"option_name": "C", "content": "堆排序"}, {"option_name": "D", "content": "归并排序"}]}, {"answer": "C", "type": "单选", "name": "<p>cron 后台常驻程序 (daemon) 用于&nbsp;( &nbsp; &nbsp; &nbsp;&nbsp;) &nbsp;</p>", "options": [{"option_name": "A", "content": "跟踪管理系统信息和错误"}, {"option_name": "B", "content": "负责文件在网络中的共享 "}, {"option_name": "C", "content": "管理系统日常任务的调度"}, {"option_name": "D", "content": "管理打印子系统 "}]}, {"answer": "C", "type": "单选", "name": "<p>在TCP/IP协议栈中，如果出现阻塞情况，下面哪种情况最可能发生（ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "释放缓存"}, {"option_name": "B", "content": "包错误"}, {"option_name": "C", "content": "丢包"}, {"option_name": "D", "content": "连接错误 "}]}, {"answer": "B", "type": "单选", "name": "<p>下面哪个子类的虚函数重新声明是正确的（ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "Base *Base::copy(Base *);<br>Base *Derived::copy(Derived *);"}, {"option_name": "B", "content": "ostream& Base::print(int, ostream&=cout);<br>ostream& Derived::print(int, ostream&);"}, {"option_name": "C", "content": "Base *Base::copy(Base *);<br>Derived *Derived::copy(Base *);"}, {"option_name": "D", "content": "void Base::eval() const;<br>void Derived::eval();"}]}, {"answer": "C", "type": "单选", "name": "<p>声明一个指向含有10个元素的数组的指针，其中每个元素是一个函数指针，该函数的返回值是int，参数是int*，正确的是（ &nbsp; &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": " int [10]*p(int*);"}, {"option_name": "B", "content": "int ((int*)[10])*p;"}, {"option_name": "C", "content": "int (*(*p)[10])(int*);"}, {"option_name": "D", "content": "(int *p[10])(int*);"}]}, {"answer": "D", "type": "单选", "name": "<p>要求通过函数来实现一种不太复杂的功能，并且要加快执行速度，选用 ( &nbsp; &nbsp; &nbsp;)</p>", "options": [{"option_name": "A", "content": "递归函数 "}, {"option_name": "B", "content": "嵌套函数"}, {"option_name": "C", "content": "重载函数 "}, {"option_name": "D", "content": "内联函数"}]}, {"answer": "A", "type": "单选", "name": "<p>下面代码输出的结果是 ( &nbsp; &nbsp; &nbsp; &nbsp;)<br></p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;i&nbsp;=&nbsp;1,&nbsp;j&nbsp;=&nbsp;2;int&nbsp;k&nbsp;=&nbsp;i+++j;cout&nbsp;&lt;&lt;&nbsp;k&nbsp;&lt;&lt;&nbsp;endl;</pre><p><br></p>", "options": [{"option_name": "A", "content": "5"}, {"option_name": "B", "content": "3"}, {"option_name": "C", "content": "4"}, {"option_name": "D", "content": "2"}]}, {"answer": "A", "type": "单选", "name": "<p>已知:print()函数是一个类的常成员函数,它无返回值,下列表示中, ( &nbsp; &nbsp; &nbsp;)是正确的&nbsp;</p>", "options": [{"option_name": "A", "content": "void print() const "}, {"option_name": "B", "content": "void const print()"}, {"option_name": "C", "content": "const void print()"}, {"option_name": "D", "content": "void print(const)"}]}, {"answer": "B", "type": "单选", "name": "<p>&nbsp;下面关于拷贝构造函数说法正确的是（ &nbsp; &nbsp;）</p>", "options": [{"option_name": "A", "content": "不能拷贝队列"}, {"option_name": "B", "content": "有一个默认的拷贝构造函数"}, {"option_name": "C", "content": "给每个对象拷贝一个构造函数"}, {"option_name": "D", "content": "其他三项结果都正确"}]}, {"answer": "C", "type": "单选", "name": "<p>下面代码输出的结果 ( &nbsp; &nbsp; &nbsp;)<br></p><pre class=\"brush:cpp;toolbar:false;\">int&nbsp;a&nbsp;=&nbsp;5,&nbsp;b&nbsp;&nbsp;=&nbsp;3;int&nbsp;k&nbsp;=&nbsp;!a&nbsp;&amp;&amp;&nbsp;b++;printf(\"%d&nbsp;%d\\\\n\",&nbsp;a,&nbsp;b);</pre>", "options": [{"option_name": "A", "content": "0  3 "}, {"option_name": "B", "content": "0  1 "}, {"option_name": "C", "content": "5  3"}, {"option_name": "D", "content": "5  4"}]}, {"answer": "D", "type": "单选", "name": "<p>下面程序的结果 （ &nbsp; &nbsp; &nbsp;）</p><pre class=\"brush:cpp;toolbar:false\">int&nbsp;i=3,&nbsp;j=4;\r\ni&nbsp;?&nbsp;i++&nbsp;:&nbsp;++j;printf(“%d&nbsp;%d\\\\n”,&nbsp;i,&nbsp;j);</pre><p><br></p>", "options": [{"option_name": "A", "content": "4  3"}, {"option_name": "B", "content": "3  3"}, {"option_name": "C", "content": "3  4"}, {"option_name": "D", "content": "4  4"}]}, {"answer": "A", "type": "单选", "name": "<p>下面程序的输出 ( &nbsp; &nbsp; &nbsp; )<br></p><pre class=\"brush:cpp;toolbar:false;\">#include&nbsp;&lt;iostream&gt;using&nbsp;namespace&nbsp;std;int&nbsp;Value=3;int&nbsp;main()&nbsp;{int&nbsp;Value&nbsp;=&nbsp;10;\r\n::Value++;cout&nbsp;&lt;&lt;&nbsp;::Value&nbsp;&lt;&lt;&nbsp;endl;cout&nbsp;&lt;&lt;&nbsp;Value&nbsp;&lt;&lt;&nbsp;endl;return&nbsp;0;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "4 10"}, {"option_name": "B", "content": "10 4 "}, {"option_name": "C", "content": "11 11 "}, {"option_name": "D", "content": "11 4 "}]}, {"answer": "A", "type": "单选", "name": "<p>下面程序的正确执行结果为 &nbsp;&nbsp;( &nbsp; &nbsp; &nbsp; &nbsp;) &nbsp; &nbsp;<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream.h&gt;&nbsp;void&nbsp;fun(char&nbsp;*&nbsp;*m)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;m++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;*m&lt;&lt;endl;&nbsp;\r\n}&nbsp;&nbsp;void&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;char&nbsp;*a[]={\"MORNING\",\"AFTERNOON\",\"EVENING\"};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;*&nbsp;*n;\r\n&nbsp;&nbsp;&nbsp;&nbsp;n=a;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;fun(n);&nbsp;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "AFTERNOON"}, {"option_name": "B", "content": "为空"}, {"option_name": "C", "content": "MORNING "}, {"option_name": "D", "content": "EVENING"}]}, {"answer": "C", "type": "单选", "name": "<p>以下代码，编译时会产生错误的是 （ &nbsp; &nbsp; &nbsp;）</p><pre class=\"brush:cpp;toolbar:false\">class&nbsp;Test\r\n{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Test(int)&nbsp;{}\r\n&nbsp;&nbsp;&nbsp;&nbsp;Test()&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;fun()&nbsp;{}\r\n};int&nbsp;main(){&nbsp;&nbsp;&nbsp;&nbsp;Test&nbsp;a(1);&nbsp;&nbsp;//statement&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;a.fun();&nbsp;&nbsp;&nbsp;&nbsp;//statement&nbsp;2\r\n&nbsp;&nbsp;&nbsp;&nbsp;Test&nbsp;b();&nbsp;&nbsp;&nbsp;&nbsp;//statement&nbsp;3\r\n&nbsp;&nbsp;&nbsp;&nbsp;b.fun();&nbsp;&nbsp;&nbsp;&nbsp;//statement&nbsp;4\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "statement 1 "}, {"option_name": "B", "content": "statement 2  "}, {"option_name": "C", "content": "statement 4"}, {"option_name": "D", "content": "statement 3"}]}, {"answer": "C", "type": "单选", "name": "<p>下面程序的正确执行结果为( &nbsp; &nbsp; &nbsp;)<br></p><pre class=\"brush:cpp;toolbar:false\">#include&lt;iostream.h&gt;&nbsp;int&nbsp;f(int);void&nbsp;main(){&nbsp;&nbsp;&nbsp;\r\n\t\tint&nbsp;a=2,&nbsp;i;&nbsp;&nbsp;&nbsp;\r\n\t\tfor(i=0;i&lt;3;i++)&nbsp;&nbsp;\t\t\tcout&lt;&lt;f(a)&lt;&lt;\"&nbsp;\";&nbsp;&nbsp;\t\tcout&lt;&lt;endl;\r\n}int&nbsp;f(int&nbsp;a){\t\tint&nbsp;b=0;\t\tstatic&nbsp;int&nbsp;c=3;\r\n\t\tb++;\r\n\t\tc++;\t\treturn&nbsp;(a+b+c);\r\n}</pre><p><br></p>", "options": [{"option_name": "A", "content": "7 7 7"}, {"option_name": "B", "content": "7 9 11"}, {"option_name": "C", "content": "7 8 9"}, {"option_name": "D", "content": "7 10 13"}]}], "company": "1号店", "name": "1号店2016校园招聘 C++开发工程师", "id": "114", "year": "2016"}